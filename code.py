# -*- coding: utf-8 -*-
"""code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xw7P5livdzqbr2bDuoWQ1qK5h6JwZnQB

# Student ID: 2311555

**You student_id is your 7/8 digit faser number.**

This is a sample format for CE807-24-SP: Assignment . You must follow the format.
The code will have three broad sections, and additional section, if needed,


1.   Common Codes
2.   Method/model 1 Specific Codes
3.   Method/model 2 Specific Codes
4.   Other Method/model Codes, if any

**You must have `train_gen`, `test_gen` for Generative method  and `train_dis`, `test_dis` for Discriminatuve method to perform full training and testing. This will be evaluated automatically, without this your code will fail and no marked.**

You code should be proverly indended, print as much as possible, follow standard coding (https://peps.python.org/pep-0008/) and documentaion (https://colab.research.google.com/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/01.01-Help-And-Documentation.ipynb) practices.

Before each `code block/function`, you must have a `text block` which explain what code block/function is going to do. For each function/class, you need to properly document what are it's input, functionality and output.

If you are using any non-standard library, you must have command to install that, for example `pip install datasets`.

You must print `train`, `validation` and `test` performance measures.

You must also print `train` and `validation` loss in each `epoch`, wherever you are using `epoch`, say in any deep learning algorithms.

Your code must

*   To reproducibality of the results you must use a `seed`, you have to set seed in `torch`, `numpy` etc, use same seed everywhere **and your Student ID should be your seed**.
*   read dataset from './student_id/data/number/', where number is last digit of your student_id folder which will have 3 files [`train.csv`, `val.csv`, `test.csv`]
*   save model after finishing the training in './student_id/Model_Gen/' and './student_id/Model_Dis/' for Generative and Discriminative model respectively.
*   at testing time you will load models from './student_id/Model_Gen/' and './student_id/Model_Dis/'  for Generative and Discriminative model respectively. Your output file based on the test file will be named “test.csv” and you will add/modify “out_label_model_Gen” and “out_label_model_Dis” column in the existing columns from test.csv. These outputs will be generated from your trained models.
*  after testing, your output file will be named “test.csv” and you will add/modify “out_label_model_Gen” and “out_label_model_Dis” column in the existing columns from test.csv. These outputs will be generated from your trained models.




**Install and import all required libraries first before starting to code.**
"""

from google.colab import drive
drive.mount('/content/drive')

"""Let's install all require libraries. For example, `transformers`"""

!pip install transformers

!pip install -U imbalanced-learn

"""Let's import all require libraries.
For example, `numpy`
"""

import numpy as np
import os
import pickle
import pandas as pd

from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, StratifiedKFold
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score, confusion_matrix
from sklearn.feature_extraction.text import TfidfVectorizer
import joblib
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')
import re
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud
import random
from imblearn.over_sampling import  ADASYN
from collections import Counter
from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.pipeline import Pipeline

"""**Let's put your student id as a variable, that you will use different places**"""

student_id = 2311555 # Note this is an interger and you need to input your id

"""Let's set `seed` for all libraries like `torch`, `numpy` etc as my student id"""

# set same seeds for all libraries

#numpy seed
np.random.seed(student_id)

# Set seed for random module
random.seed(student_id)

"""# Common Codes

In this section you will write all common codes, for examples


*   Data read
*   Command Line argument reading
*   Performance Matrics
*   Print Dataset Statistics
*   Saving model and output
*   Loading Model and output
*   etc

**Let's first allow the GDrive access and set data and model paths**

For examples,

student_id = 1234567

set GOOGLE_DRIVE_PATH_AFTER_MYDRIVE = ‘./CE807/Assignment/student_id/’ in your GDrive

now set all global variable,
(Example for model 1 with 25% of data)

train_file = os.path.join(GOOGLE_DRIVE_PATH_AFTER_MYDRIVE, 'train.csv')

MODEL_Gen_DIRECTORY = os.path.join('gdrive', 'MyDrive', GOOGLE_DRIVE_PATH, ‘models’, ‘1’)



Sample output directory and file structure: https://drive.google.com/drive/folders/1okgSzgGiwPYYFp7NScEt9MNVolOlld1d?usp=share_link
"""

# Mount Google Drive
from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)

# Add your code to initialize GDrive and data and models paths

# TODO: Fill in the Google Drive path where you uploaded the assignment, data and code
# Example: If your student_id is 12345670 then your directory will be './CE807-24-SP/Assignment/12345670/'

GOOGLE_DRIVE_PATH_AFTER_MYDRIVE = './CE807-24-SP/Assignment/2311555/'
GOOGLE_DRIVE_PATH = os.path.join('gdrive', 'MyDrive', GOOGLE_DRIVE_PATH_AFTER_MYDRIVE)
print('List files: ', os.listdir(GOOGLE_DRIVE_PATH))

DATA_PATH = os.path.join(GOOGLE_DRIVE_PATH, 'data', '5') # Make sure to replace 0 with last digit of your student Regitration number
train_file = os.path.join(DATA_PATH, 'train.csv')
print('Train file: ', train_file)

val_file = os.path.join(DATA_PATH, 'valid.csv')
print('Validation file: ', val_file)

test_file = os.path.join(DATA_PATH, 'test.csv')
print('Test file: ', test_file)


MODEL_PATH = os.path.join(GOOGLE_DRIVE_PATH, 'model', str(student_id)) # Make sure to use your student Regitration number
MODEL_Gen_DIRECTORY = os.path.join(MODEL_PATH, 'Model_Gen') # Model Generative directory
print('Model Generative directory: ', MODEL_Gen_DIRECTORY)

MODEL_Gen_File = MODEL_Gen_DIRECTORY + '.zip'


MODEL_Dis_DIRECTORY = os.path.join(MODEL_PATH, 'Model_Dis') # Model Discriminative directory
print('Model Discriminative directory: ', MODEL_Dis_DIRECTORY)

MODEL_Dis_File = MODEL_Dis_DIRECTORY + '.zip'

"""Let's see train file"""

train_df = pd.read_csv(train_file)
valid_df = pd.read_csv(val_file)
test_df = pd.read_csv(test_file)
train_df.head()

def preprocess_Comment_text(text):
    # Remove specified substrings
    text = text.replace("SDATA_5", ' ')
    text = text.replace("EDATA_5", ' ')
    text = text.replace("NEWLINE_TOKENNEWLINE_TOKEN", ' ')
    text = text.replace("NEWLINE_TOKEN", ' ')

    # Remove special characters and extra whitespaces
    text = re.sub(r'[^\w\s]', '', text)
    text = re.sub(r'\s+', ' ', text)
    text = re.sub(r'<[^>]+>', '', text)
    text = re.sub(r'http\S+', '', text)

    # Convert text to lowercase
    text = text.lower()
    # Tokenize the text into words
    tokens = word_tokenize(text)
    # Remove stopwords
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in tokens if word not in stop_words]
    # Lemmatize words to their base form
    lemmatizer = WordNetLemmatizer()
    tokens = [lemmatizer.lemmatize(word) for word in tokens]
    return ' '.join(tokens)

train_df['clear_comment'] = train_df['comment'].apply(preprocess_Comment_text)
valid_df['clear_comment'] = valid_df['comment'].apply(preprocess_Comment_text)
test_df['clear_comment'] = test_df['comment'].apply(preprocess_Comment_text)
train_df.head()

"""**Data Visualization:**"""

import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter
from wordcloud import WordCloud

def visualize_data(train_df):
    # Word Cloud for cleaned comments
    all_cleaned_comments = ' '.join(train_df['clear_comment'])
    wordcloud_cleaned = WordCloud(width=800, height=400).generate(all_cleaned_comments)

    plt.figure(figsize=(12, 6))
    plt.imshow(wordcloud_cleaned, interpolation='bilinear')
    plt.title('Word Cloud of Cleaned Comments')
    plt.xlabel('Words')
    plt.ylabel('Frequency')
    plt.axis('off')
    plt.show()

    # Word Cloud for uncleaned comments
    all_comments = ' '.join(train_df['comment'])
    wordcloud_uncleaned = WordCloud(width=800, height=400).generate(all_comments)

    plt.figure(figsize=(12, 6))
    plt.imshow(wordcloud_uncleaned, interpolation='bilinear')
    plt.title('Word Cloud of Uncleaned Comments')
    plt.xlabel('Words')
    plt.ylabel('Frequency')
    plt.axis('off')
    plt.show()

    # Countplot for toxicity
    sns.countplot(x='toxicity', data=train_df)
    plt.show()

    # Barplot for top 20 most frequent words
    top_words = Counter(' '.join(train_df['clear_comment']).split()).most_common(20)
    top_words_df = pd.DataFrame(top_words, columns=['Word', 'Frequency'])

    plt.figure(figsize=(12, 6))
    sns.barplot(x='Frequency', y='Word', data=top_words_df, palette='viridis')
    plt.xlabel('Frequency')
    plt.ylabel('Word')
    plt.title('Top 20 Most Frequent Words')
    plt.show()

    # Pairplot of selected features
    selected_features = train_df[['toxicity', 'clear_comment', 'comment_id']]
    sns.pairplot(selected_features, hue='toxicity', palette='Set2')
    plt.title('Pairplot of Selected Features')
    plt.show()

visualize_data(train_df)

"""Let's show you a sample output file. Notice all fields, `out_label` is your model's output for that `tweet` and `id`

We are going to use different performance matrics like Accuracy, Recall (macro), Precision (macro), F1 (macro) and Confusion Matrix for the performance evaluation. We will print all the matrics and display Confusion Matrix with proper X & Y axis labels
"""

import pandas as pd

# Read the CSV files
train_df = pd.read_csv(train_file)
valid_df = pd.read_csv(val_file)
test_df = pd.read_csv(test_file)

# Calculate statistics
total_train = len(train_df)
total_valid = len(valid_df)
total_test = len(test_df)

class_a_train = (train_df['toxicity'] == 1).sum()
class_b_train = (train_df['toxicity'] == 0).sum()

class_a_valid = (valid_df['toxicity'] == 1).sum()
class_b_valid = (valid_df['toxicity'] == 0).sum()

class_a_test = (test_df['out_label_model_Gen'] == -1).sum()
class_b_test = (test_df['out_label_model_Dis'] == -1).sum()

# Print the summary statistics
print("Dataset Total % Class A % Class B")
print(f"Train {total_train} {class_a_train/total_train*100:.2f}% {class_b_train/total_train*100:.2f}%")
print(f"Valid {total_valid} {class_a_valid/total_valid*100:.2f}% {class_b_valid/total_valid*100:.2f}%")
print(f"Test {total_test} {class_a_test/total_test*100:.2f}% {class_b_test/total_test*100:.2f}%")

def display_diverse_examples(val_file, student_id):
    # Read the validation data
    validation_data = pd.read_csv(val_file)

    # Select 5 diverse examples from the validation set
    diverse_samples = validation_data.sample(n=5, random_state=student_id)

    # Convert selected examples to a DataFrame
    diverse_samples_df = pd.DataFrame(diverse_samples, columns=['comment', 'toxicity'])

    # Display the selected examples and their ground truth labels
    for idx, row in diverse_samples_df.iterrows():
        print(f"Example {idx + 1}:")
        print("Comment:", row['comment'])
        print("Truth Label:", row['toxicity'])
        print()

    return diverse_samples_df

examples = display_diverse_examples(val_file , student_id)

from sklearn.metrics import f1_score

def compute_performance(y_true, y_pred):
    """
    prints different performance matrics like  Accuracy, Recall (macro), Precision (macro), and F1 (macro).
    This also display Confusion Matrix with proper X & Y axis labels.
    Also, returns F1 score

    Args:
        y_true: numpy array or list
        y_pred: numpy array or list


    Returns:
        float
    """

     # Calculate performance metrics
    accuracy = accuracy_score(y_true, y_pred)
    recall = recall_score(y_true, y_pred, average='macro')
    precision = precision_score(y_true, y_pred, average='macro')
    f1 = f1_score(y_true, y_pred, average='macro')
    conf_matrix = confusion_matrix(y_true, y_pred)

    # Print performance metrics
    print("Accuracy:", accuracy)
    print("Recall (macro):", recall)
    print("Precision (macro):", precision)
    print("F1-score (macro):", f1)

    # Display Confusion Matrix with proper axis labels
    plt.figure(figsize=(8, 6))
    sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues")
    plt.title("Confusion Matrix")
    plt.xlabel("Predicted Label")
    plt.ylabel("True Label")
    plt.show()
    return f1

def vectorize_data(X, y):
    """
    Vectorize the textual data.

    Args:
        X: Input features (text data)
        y: Target labels

    Returns:
        Vectorized features and labels
    """
    # Feature Engineering
    tfidf_vectorizer = TfidfVectorizer(max_features=15000)
    X_vectorized = tfidf_vectorizer.fit_transform(X).toarray()

    print("Shape of X_vectorized:", X_vectorized.shape)
    print("Shape of y:", y.shape)

    return X_vectorized, y

"""**To Handle Class Imbalance**

"""

def apply_resampling(X_train, y_train, student_id):
    """
    Apply resampling technique to the training data.
    """
    resampler = ADASYN(random_state=student_id)
    X_resampled, y_resampled = resampler.fit_resample(X_train, y_train)
    return X_resampled, y_resampled

def save_model(model,model_dir):
  # save the model to disk

  # Check if the Model directory exists
  if not os.path.exists(model_dir):
      # Create the directory if it doesn't exist
      os.makedirs(model_dir)
      print(f"Directory '{model_dir}' created successfully.")
  else:
      print(f"Directory '{model_dir}' already exists.")

  model_file = os.path.join(model_dir, 'model.sav')
  pickle.dump(model, open(model_file, 'wb'))

  print('Saved model to ', model_file)

  return model_file

def load_model(model_file):
    # load modelfrom disk

    model = pickle.load(open(model_file, 'rb'))

    print('Loaded model from ', model_file)

    return model

"""# Let's download GDrive Link into a directory"""

import requests

def extract_file_id_from_url(url):
    # Extract the file ID from the URL
    file_id = None
    if 'drive.google.com' in url:
        file_id = url.split('/')[-2]
    elif 'https://docs.google.com' in url:
        file_id = url.split('/')[-1]

    return file_id

def download_file_from_drive(file_id, file_path):
    # Construct the download URL
    download_url = f"https://drive.google.com/uc?id={file_id}"

    # Download the file
    response = requests.get(download_url)
    if response.status_code == 200:
        with open(file_path, 'wb') as f:
            f.write(response.content)
        print("File downloaded successfully!",file_path)
    else:
        print("Failed to download the file.")

def download_zip_file_from_link(file_url,file_path):

  file_id = extract_file_id_from_url(file_url)
  if file_id:
      download_file_from_drive(file_id, file_path)
  else:
      print("Invalid Google Drive URL.")

"""# Zip and Unzip a GDrive File"""

import zipfile
import shutil
import os

# Function to zip a directory
def zip_directory(directory, zip_filename):
    with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(directory):
            for file in files:
                zipf.write(os.path.join(root, file), os.path.relpath(os.path.join(root, file), os.path.join(directory, '..')))
        print('Created a zip file',zip_filename)

# Function to unzip a zip file
def unzip_file(zip_filename, extract_dir):
    with zipfile.ZipFile(zip_filename, 'r') as zip_ref:
        zip_ref.extractall(extract_dir)
    print('Extracted a zip file to',extract_dir)

# Example usage:
# directory_to_zip = 'path/to/your/directory'
# zip_filename = 'output_zipfile.zip'

# # Zip the directory
# zip_directory(directory_to_zip, zip_filename)

# # Unzip the zip file
# extract_dir = 'path/to/extract'
# unzip_file(zip_filename, extract_dir)

"""# Get Sharable link of your Zip file in Gdrive"""

!pip install -U -q PyDrive

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials


def get_gdrive_link(file_path):
    # Authenticate and create PyDrive client
    auth.authenticate_user()
    gauth = GoogleAuth()
    gauth.credentials = GoogleCredentials.get_application_default()
    drive = GoogleDrive(gauth)

    # Find the file in Google Drive
    file_name = file_path.split('/')[-1]
    file_list = drive.ListFile({'q': f"title='{file_name}'"}).GetList()

    # Get the file ID and generate the shareable link
    if file_list:
        file_id = file_list[0]['id']
        gdrive_link = f"https://drive.google.com/file/d/{file_id}/view?usp=sharing"
        return gdrive_link
    else:
        return "File not found in Google Drive"

def get_shareable_link(url):

    file_id = extract_file_id_from_url(url)

    auth.authenticate_user()
    gauth = GoogleAuth()
    gauth.credentials = GoogleCredentials.get_application_default()
    drive = GoogleDrive(gauth)

    try:
        file_obj = drive.CreateFile({'id': file_id})
        file_obj.FetchMetadata()
        file_obj.InsertPermission({
            'type': 'anyone',
            'value': 'anyone',
            'role': 'reader'
        })

        # Get the shareable link
        return file_obj['alternateLink']
    except Exception as e:
        print("Error:", e)
        return None

# if __name__ == "__main__":
#     # Replace 'YOUR_FILE_ID' with the ID of the file you want to share
#     file_id = 'YOUR_FILE_ID'
#     shareable_link = get_shareable_link(file_id)
#     if shareable_link:
#         print("Shareable link:", shareable_link)
#     else:
#         print("Failed to generate shareable link.")

"""# Method Generative Start

In this section you will write all details of your Method 1.

You will have to enter multiple `code` and `text` cell.

Your code should follow the standard ML pipeline


*   Data reading
*   Data clearning, if any
*   Convert data to vector/tokenization/vectorization
*   Model Declaration/Initialization/building
*   Training and validation of the model using training and validation dataset
*   Save the trained model
*   Load and Test the model on testing set
*   Save the output of the model


You could add any other step(s) based on your method's requirement.

After finishing the above, you need to usd splited data as defined in the assignment and then do the same for all 4 sets. Your code should not be copy-pasted 4 time, make use of `function`.

"""

# Custom transformer for grid search
class GridSearchTransformer(BaseEstimator, TransformerMixin):
    def __init__(self, estimator, param_grid, cv=5, scoring='f1_macro'):
        self.estimator = estimator
        self.param_grid = param_grid
        self.cv = cv
        self.scoring = scoring

    def fit(self, X, y=None):
        # Initialize StratifiedKFold for cross-validation
        self.cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=student_id)
        self.grid_search = GridSearchCV(estimator=self.estimator, param_grid=self.param_grid, cv=self.cv, scoring=self.scoring, verbose=2, n_jobs=-1)
        self.grid_search.fit(X, y)
        self.best_estimator_ = self.grid_search.best_estimator_
        return self

    def transform(self, X):
        return X

"""## Training Generative Method Code
Your test code should be a stand alone code that must take `train_file`, `val_file`,  and `model_dir` as input. You could have other things as also input, but these three are must. You would load both files, and train using the `train_file` and validating using the `val_file`. You will `print` / `display`/ `plot` all performance metrics, loss(if available) and save the output model in the `model_dir`.

Note that at the testing time, you need to use the same pre-processing and model. So, it would be good that you make those as seperate function/pipeline whichever it the best suited for your method. Don't copy-paste same code twice, make it a fucntion/class whichever is best.
"""

def train_Gen(train_file, val_file, model_dir):
    """
    Takes train_file, val_file and model_dir as input.
    It trained on the train_file datapoints, and validate on the val_file datapoints.
    While training and validating, it print different evaluataion metrics and losses, wheverever necessary.
    After finishing the training, it saved the best model in the model_dir.

    ADD Other arguments, if needed.

    Args:
        train_file: Train file name
        val_file: Validation file name
        model_dir: Model output Directory



    """

    ##########################################################################
    #                     TODO: Implement this function                      #
    ##########################################################################
    # Replace "pass" statement with your code
    # Read train and validation data
    train_df = pd.read_csv(train_file)
    valid_df = pd.read_csv(val_file)

    # Apply preprocessing to train and validation data
    train_df['clear_comment'] = train_df['comment'].apply(preprocess_Comment_text)
    valid_df['clear_comment'] = valid_df['comment'].apply(preprocess_Comment_text)

    # Vectorization and Model
    pipeline = Pipeline([
        ('tfidf', TfidfVectorizer(max_features=20000)),
        ('grid_search', GridSearchTransformer(estimator=MultinomialNB(), param_grid={'alpha': [0.01, 0.1, 1.0]})),
        ('clf', MultinomialNB())
    ])

    # Subset sizes to gradually increase
    subset_sizes = [0.1, 0.3, 0.5, 0.7, 1.0]  # Percentage of the full dataset

    # Initialize dictionary to store F1 scores for each subset size
    f1_scores = {subset_size: [] for subset_size in subset_sizes}

    for subset_size in subset_sizes:
        print(f"Training with subset size: {subset_size}")

        # Subset the data
        X_subset = train_df['clear_comment'][:int(subset_size * len(train_df))]
        y_subset = train_df['toxicity'][:int(subset_size * len(train_df))]

        # Fit the pipeline
        pipeline.fit(X_subset, y_subset)

        # Get best model
        best_model = pipeline.named_steps['grid_search'].best_estimator_
        # Apply vectorizer to the valid_df
        valid_X = pipeline.named_steps['tfidf'].transform(valid_df['clear_comment'])


        # Evaluate model on validation set
        print("**************************************************************************************")
        print(f"Evaluate model for subset size: {subset_size}")
        y_pred = best_model.predict(valid_X)
        f1 = compute_performance(valid_df['toxicity'], y_pred)
        f1_scores[subset_size].append(f1)

    # Print benchmarking results
    print("\nBenchmarking Results:")
    for subset_size, scores in f1_scores.items():
        mean_f1 = np.mean(scores)
        print(f"F1 Score for subset size {subset_size}: Mean = {mean_f1:.4f}")

    # Save the best model
    best_subset_size = max(f1_scores, key=lambda k: np.mean(f1_scores[k]))
    print("Model Best Fit for: ",best_subset_size)
    pipeline.fit(train_df['clear_comment'][:int(best_subset_size * len(train_df))], train_df['toxicity'][:int(best_subset_size * len(train_df))])
    save_model(pipeline, model_dir)

    # Now Zip Model to share it
    zip_directory(model_dir, MODEL_Gen_File)

    model_gdrive_link = get_gdrive_link(MODEL_Gen_File)

    print(model_gdrive_link)
    get_shareable_link(model_gdrive_link)
    ##########################################################################
    #                            END OF YOUR CODE                            #
    ##########################################################################
    return model_gdrive_link

model_gdrive_link_gen = train_Gen(train_file,val_file,MODEL_Gen_DIRECTORY)

"""## Testing Method 1 Code
Your test code should be a stand alone code that must take `test_file`, `model_file` and `output_dir` as input. You could have other things as also input, but these three are must. You would load both files, and generate output based on inputs. Then you will `print` / `display`/ `plot` all performance metrics, and save the output file in the `output_dir`  
"""

def test_Gen(test_file,MODEL_PATH, model_gdrive_link):
    """
    take test_file, model_file and output_dir as input.
    It loads model and test of the examples in the test_file.
    It prints different evaluation metrics, and saves the output label in test_file

    ADD Other arguments, if needed

    Args:
        test_file: test file name
        model_file: model file name
    """
    print('\n Start by downloading model')
    # First Get model from the link
    # These two are temporary directory and file
    # model_gdrive_link = get_gdrive_link(model_file)
    test_model_file = MODEL_PATH+'/test.zip'
    test_model_path = MODEL_PATH+'/test/'


    # Now download and unzip the model file
    download_zip_file_from_link(model_gdrive_link,test_model_file)
    print('Model downloaded to', test_model_file)
    unzip_file(test_model_file, test_model_path)
    print('\n Model is downloaded to ',test_model_path)


    # Load the model from file
    model_file = os.path.join(test_model_path,'Model_Gen', 'model.sav')
    model = load_model(model_file)

    ##########################################################################
    #                     TODO: Implement this function                      #
    ##########################################################################


    # Read test data
    test_df = pd.read_csv(test_file)
    test_df['clear_comment'] = test_df['comment'].apply(preprocess_Comment_text)
    cleaned = examples['comment'].apply(preprocess_Comment_text)

    # Vectorize the test data
    # X_test, y_test = vectorize_data(test_df['clear_comment'], test_df['toxicity'])

    # Load the model
    model = load_model(model_file)

    # Predict on test data
    y_pred = model.predict(test_df['clear_comment'])
    examples['out_label_model_Gen'] = model.predict(cleaned)

    # # Compute evaluation metrics using the compute_performance function
    # f1 = compute_performance(y_test, y_pred)

    # Save the output labels in test file
    test_df['out_label_model_Gen'] = y_pred
    test_df.to_csv(test_file, index=False)

    print('\n Output is save in ', test_file)

    return test_file

model_gdrive_link = "https://drive.google.com/file/d/1--NFkN0YQR2-vrdYTPwkPZeXw01C58xk/view?usp=sharing"
test_Gen(test_file,MODEL_Gen_DIRECTORY, model_gdrive_link)

"""## Method Generative End

# Method Discriminative Start

In this section you will write all details of your Method 2.

You will have to enter multiple `code` and `text` cell.

Your code should follow the standard ML pipeline


*   Data reading
*   Data clearning, if any
*   Convert data to vector/tokenization/vectorization
*   Model Declaration/Initialization/building
*   Training and validation of the model using training and validation dataset
*   Save the trained model
*   Load and Test the model on testing set
*   Save the output of the model

You could add any other step(s) based on your method's requirement.

After finishing the above, you need to usd splited data as defined in the assignment and then do the same for all 4 sets. Your code should not be copy-pasted 4 time, make use of `function`.

## Training Method 2 Code
Your test code should be a stand alone code that must take `train_file`, `val_file`,  and `model_dir` as input. You could have other things as also input, but these three are must. You would load both files, and train using the `train_file` and validating using the `val_file`. You will `print` / `display`/ `plot` all performance metrics, loss(if available) and save the output model in the `model_dir`.

Note that at the testing time, you need to use the same pre-processing and model. So, it would be good that you make those as seperate function/pipeline whichever it the best suited for your method. Don't copy-paste same code twice, make it a fucntion/class whichever is best.
"""

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline

def train_dis(train_file, val_file, model_dir):
    """
    Takes train_file, val_file and model_dir as input.
    It trained on the train_file datapoints, and validate on the val_file datapoints.
    While training and validating, it print different evaluataion metrics and losses, wheverever necessary.
    After finishing the training, it saved the best model in the model_dir.

    ADD Other arguments, if needed.

    Args:
        train_file: Train file name
        val_file: Validation file name
        model_dir: Model output Directory

    """

    ##########################################################################
    #                     TODO: Implement this function                      #
    ##########################################################################
    # Replace "pass" statement with your code

    # Read train and validation data
    train_df = pd.read_csv(train_file)
    valid_df = pd.read_csv(val_file)

    # Apply preprocessing to train and validation data
    train_df['clear_comment'] = train_df['comment'].apply(preprocess_Comment_text)
    valid_df['clear_comment'] = valid_df['comment'].apply(preprocess_Comment_text)

    # Vectorization and Model
    pipeline = Pipeline([
        ('tfidf', TfidfVectorizer(max_features=15000)),
        ('grid_search', GridSearchTransformer(estimator=RandomForestClassifier(), param_grid={'n_estimators': [100, 200]})),
        ('clf', RandomForestClassifier())
    ])

    # Subset sizes to gradually increase
    subset_sizes = [0.1, 0.3, 0.5, 0.7, 1.0]  # Percentage of the full dataset

    # Initialize dictionary to store F1 scores for each subset size
    f1_scores = {subset_size: [] for subset_size in subset_sizes}

    for subset_size in subset_sizes:
        print(f"Training with subset size: {subset_size}")

        # Subset the data
        X_subset = train_df['clear_comment'][:int(subset_size * len(train_df))]
        y_subset = train_df['toxicity'][:int(subset_size * len(train_df))]

        # Fit the pipeline
        pipeline.fit(X_subset, y_subset)

        # Get best model
        best_model = pipeline.named_steps['grid_search'].best_estimator_
        # Apply vectorizer to the valid_df
        valid_X = pipeline.named_steps['tfidf'].transform(valid_df['clear_comment'])

        # Evaluate model on validation set
        print("**************************************************************************************")
        print(f"Evaluate model for subset size: {subset_size}")
        y_pred = best_model.predict(valid_X)
        f1 = compute_performance(valid_df['toxicity'], y_pred)
        f1_scores[subset_size].append(f1)

    # Print benchmarking results
    print("\nBenchmarking Results:")
    for subset_size, scores in f1_scores.items():
        mean_f1 = np.mean(scores)
        print(f"F1 Score for subset size {subset_size}: Mean = {mean_f1:.4f}")

    # Save the best model
    best_subset_size = max(f1_scores, key=lambda k: np.mean(f1_scores[k]))
    print("Model Best Fit for: ",best_subset_size)
    pipeline.fit(train_df['clear_comment'][:int(best_subset_size * len(train_df))], train_df['toxicity'][:int(best_subset_size * len(train_df))])
    save_model(pipeline, model_dir)


    # Now Zip Model to share it
    zip_directory(model_dir, MODEL_Dis_File)

    model_gdrive_link = get_gdrive_link(MODEL_Dis_File)

    print(model_gdrive_link)
    get_shareable_link(model_gdrive_link)

    ##########################################################################
    #                            END OF YOUR CODE                            #
    ##########################################################################
    return model_gdrive_link

model_gdrive_link_dis = train_dis(train_file, val_file, MODEL_Dis_DIRECTORY)

"""## Testing Method 2 Code
Your test code should be a stand alone code that must take `test_file`, `model_file` and `output_dir` as input. You could have other things as also input, but these three are must. You would load both files, and generate output based on inputs. Then you will `print` / `display`/ `plot` all performance metrics, and save the output file in the `output_dir`  
"""

def test_dis(test_file, MODEL_PATH,model_gdrive_link):
    """
    take test_file, model_file and output_dir as input.
    It loads model and test of the examples in the test_file.
    It prints different evaluation metrics, and saves the output in output directory

    ADD Other arguments, if needed

    Args:
        test_file: test file name
        model_file: model file name

    """
    print('\n Start by downloading model')
    # Frist Get model from the link
    # model_gdrive_link = get_gdrive_link(model_file)

    # These two are temporary directory and file
    test_model_file = MODEL_PATH+'/test.zip'
    test_model_path = MODEL_PATH+'/test/'

    # Now download and unzip the model file
    download_zip_file_from_link(model_gdrive_link,test_model_file)
    unzip_file(test_model_file, test_model_path)
    print('\n Model is downloaded to ',test_model_path)
    ##########################################################################
    #                     TODO: Implement this function                      #
    ##########################################################################
    # Replace "pass" statement with your code

    # Let's get test data
    test_df = pd.read_csv(test_file)
    print('\n Data is loaded from ', test_file)

    # Let's get the model file name & load it
    # Note you have to use same name a you used in the save

    test_model_file = os.path.join(test_model_path, 'Model_Dis', 'model.sav')

    test_df['clear_comment'] = test_df['comment'].apply(preprocess_Comment_text)
    cleaned = examples['comment'].apply(preprocess_Comment_text)

    # Vectorize the test data
    # X_test, y_test = vectorize_data(test_df['clear_comment'], test_df['toxicity'])

    model = load_model(test_model_file)

    # Let's do the prediction using test data
    y_pred= model.predict(test_df['clear_comment'])

    # Now save the model output in the same test file
    # Note the name of output column, this is for the discriminative model
    test_df['out_label_model_Dis'] = y_pred
    examples['out_label_model_Dis'] = model.predict(cleaned)

    # Now save the model output in the same output file
    test_df.to_csv(test_file, index=False)
    print('\n Output is save in ', test_file)

    ##########################################################################
    #                            END OF YOUR CODE                            #
    ##########################################################################
    return test_file

model_gdrive_link_dis = "https://drive.google.com/file/d/1-jjVUnMuYHDiol34RQ4cYEp1Qmdyn-xh/view?usp=sharing"
test_dis(test_file, MODEL_Dis_DIRECTORY,model_gdrive_link_dis)

"""## Discriminative Method  End

"""

examples

"""# Other Method/model Start"""

import argparse

# Define argparse-like function
def parse_arguments(option):
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('--option', '-o',  type=str, default=option, help='Description of your option.')
    args = parser.parse_args(args=[])
    return args

# Function to perform some action based on selected option
def perform_action(option):
    print("Performing action with option:", option)

    if option == '0':
      print('\n Okay Exiting!!! ')
    elif option == '1':
      print('\n Training Generative Model')
      train_Gen(train_file,val_file,MODEL_Gen_DIRECTORY)
    elif option == '2':
      print('\n Testing Generative Model')
      model_url = "https://drive.google.com/file/d/1--NFkN0YQR2-vrdYTPwkPZeXw01C58xk/view?usp=sharing"
      test_Gen(test_file, MODEL_Gen_DIRECTORY,model_url)
    elif option == '3':
      print('\n Training Disciminative Model')
      train_dis(train_file,val_file,MODEL_Gen_DIRECTORY)
    elif option == '4':
      print('\n Testing Disciminative Model')
      model_url = 'https://drive.google.com/file/d/1-jjVUnMuYHDiol34RQ4cYEp1Qmdyn-xh/view?usp=sharing'
      test_dis(test_file, MODEL_Dis_DIRECTORY,model_url)
    else:
      print('Wrong Option Selected. \n\nPlease select Correct option')
      main()


def main():

    # Get option from user input
    user_option = input("0. To Exit Code\n"
                     "1. Train Model Generative\n"
                    "2. Test Model Generative\n"
                    "3. Train Model Discriminative\n"
                    "4. Test Model Discriminative\n"
                    "Enter your option: ")

    args = parse_arguments(user_option)
    option = args.option
    perform_action(option)

main()

"""##Other Method/model End"""